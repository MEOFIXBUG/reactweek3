{"version":3,"sources":["Square.js","Board.js","Game.js","index.js"],"names":["Square","props","className","winnerClass","onClick","value","Board","row","col","board","cellCounter","i","columns","j","push","this","renderSquare","key","winnerSquares","squares","createBoard","React","Component","initialState","history","Array","fill","currentStepNumber","xIsNext","Game","status","useState","setHistory","setCurrentStepNumber","setXisNext","lines","length","a","b","c","winner","winnerRow","calculateWinner","statusClass","move","timeInHistory","slice","current","console","log","concat","currentLocation","0","1","2","3","4","5","6","7","8","stepNumber","handleClick","reverse","sortMoves","map","_step","destination","classButton","step","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6565a8a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = props => (\r\n  <button className={`${props.winnerClass} square`} onClick={props.onClick}>\r\n    {props.value}\r\n  </button>\r\n);\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component {\r\n  createBoard(row, col) {\r\n    const board = [];\r\n    let cellCounter = 0;\r\n\r\n    for (let i = 0; i < row; i += 1) {\r\n      const columns = [];\r\n      for (let j = 0; j < col; j += 1) {\r\n        columns.push(this.renderSquare(cellCounter++));\r\n      }\r\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\r\n    }\r\n\r\n    return board; \r\n  }\r\n\r\n  renderSquare(i) {\r\n    const winnerClass =\r\n      this.props.winnerSquares &&\r\n      (this.props.winnerSquares[0] === i ||\r\n        this.props.winnerSquares[1] === i ||\r\n        this.props.winnerSquares[2] === i)\r\n        ? 'square--green'\r\n        : '';\r\n\r\n    return (\r\n      <Square\r\n        winnerClass={winnerClass}\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.createBoard(3, 3)}</div>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React ,{useState} from 'react';\r\nimport Board from './Board';\r\n\r\nconst calculateWinner = (squares) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i += 1) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return { winner: squares[a], winnerRow: lines[i] };\r\n    }\r\n  }\r\n\r\n  return { winner: null, winnerRow: null };\r\n};\r\n\r\nconst getLocation = (move) => {\r\n  const locationMap = {\r\n    0: 'dòng: 1, cột: 1',\r\n    1: 'dòng: 1, cột: 2',\r\n    2: 'dòng: 1, cột: 3',\r\n    3: 'dòng: 2, cột: 1',\r\n    4: 'dòng: 2, cột: 2',\r\n    5: 'dòng: 2, cột: 3',\r\n    6: 'dòng: 3, cột: 1',\r\n    7: 'dòng: 3, cột: 2',\r\n    8: 'dòng: 3, cột: 3',\r\n  };\r\n\r\n  return locationMap[move];\r\n};\r\n\r\nconst initialState = {\r\n  history: [\r\n    {\r\n      squares: Array(9).fill(null),\r\n    },\r\n  ],\r\n  currentStepNumber: 0,\r\n  xIsNext: true,\r\n};\r\n\r\nconst Game =()=> {\r\n    const [history, setHistory] = useState(initialState.history);\r\n    const [currentStepNumber, setCurrentStepNumber] = useState(initialState.currentStepNumber);\r\n    const [xIsNext, setXisNext] = useState(initialState.xIsNext);\r\n    const  { winner, winnerRow } = calculateWinner(history[currentStepNumber].squares);\r\n  const handleClick=(i)=> {\r\n    const timeInHistory = history.slice(0, currentStepNumber + 1);\r\n    const current = timeInHistory[timeInHistory.length-1];\r\n    const squares = [...current.squares];\r\n    console.log(winner);\r\n    if (winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? 'X' : 'O';\r\n    \r\n    setHistory(timeInHistory.concat([\r\n      {\r\n        squares,\r\n        currentLocation: getLocation(i),\r\n        stepNumber: timeInHistory.length,\r\n      }\r\n    ]));\r\n    setCurrentStepNumber(timeInHistory.length);        \r\n    setXisNext(!xIsNext);\r\n  }\r\n\r\n  const jumpTo=(step)=> {\r\n    setCurrentStepNumber(step);\r\n    setXisNext(step % 2 === 0)\r\n  }\r\n\r\n  const sortMoves=() =>{\r\n    const timeInHistory = [...history];\r\n    setHistory(timeInHistory.reverse());\r\n  }\r\n\r\n  const reset=()=> {\r\n    setHistory(initialState.history);\r\n    setCurrentStepNumber(initialState.currentStepNumber);\r\n    setXisNext(initialState.xIsNext);\r\n  }\r\n\r\n  \r\n  const renderMoves = () => (\r\n    history.map((_step, move) => {\r\n        const currentLocation=_step.currentLocation?`(${_step.currentLocation})` : '';\r\n        const destination = _step.stepNumber ? `Move #${_step.stepNumber}` : 'Start';\r\n        const classButton = move === currentStepNumber ? 'button--green' : '';\r\n        return (\r\n          <li key={move}>\r\n          <button className={`${classButton} button`} onClick={() =>jumpTo(move)}>\r\n            {`${destination} ${currentLocation}`}\r\n          </button>\r\n        </li>\r\n        )\r\n    })        \r\n)\r\n    let status;\r\n    let statusClass=\"status\";\r\n    if (winner) {\r\n      status = `Winner ${winner}`;\r\n      statusClass=\"statusWinner\";\r\n    } else if (history.length === 10) {\r\n      status = 'Draw. No one won.';\r\n      statusClass=\"statusDraw\"\r\n    } else {\r\n      status = `Next player: ${xIsNext ? 'X' : 'O'}`;\r\n    }\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={history[currentStepNumber].squares}\r\n          winnerSquares={winnerRow}\r\n          onClick={i => handleClick(i)}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div className={`${statusClass}`}>{status}</div>\r\n        <button className=\"button\" onClick={() => sortMoves()}>\r\n          Sort moves\r\n        </button>\r\n        <button className=\"button button--new-game\" onClick={() => reset()}>\r\n          New game\r\n        </button>\r\n        <ol>{renderMoves()}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","/* eslint-env browser */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './Game';\r\nimport './index.css';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n"],"sourceRoot":""}